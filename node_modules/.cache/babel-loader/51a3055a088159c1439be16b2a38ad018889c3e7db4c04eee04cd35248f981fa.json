{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\my-app\\\\src\\\\components\\\\number-keyboard\\\\number-keyboard.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Single button component\nconst NumberButton = props => {\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"button\",\n    className: \"number-button button\",\n    value: props.number,\n    onClick: props.click\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 9\n  }, this);\n};\n\n// All numbers in Keyboard component from min to max\n_c = NumberButton;\nconst Keyboard = props => {\n  // Create array of numbers\n  let numbers = [];\n  for (let i = props.max; i >= props.min; i--) {\n    numbers.push(i);\n  }\n\n  // Create button components\n  let keyboard = numbers.map(value => {\n    return /*#__PURE__*/_jsxDEV(NumberButton, {\n      number: value,\n      click: () => showNumber(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"keyboard-numbers calculator-section\",\n    children: keyboard\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n\n// Function to replace the number displayed in the screen\n_c2 = Keyboard;\nconst showNumber = value => {\n  let screen = document.getElementById(\"screen\");\n  screen.innerText = value;\n  let screenContent = screen.innerText.split(\"\");\n  // Check if last element is a number (true) or not\n  let lastIsNumber = isNaN(parseInt(screenContent.at(-1))) ? false : true;\n  if (lastIsNumber) {\n    if (screenContent.length === 1 && screenContent.at(-1) === \"0\") {\n      // Check that screen has not just a \"0\"\n      screen.innerText = 0;\n    } else {\n      screen.innerText += \" \" + operation;\n    }\n  } else {\n    screenContent.pop();\n    screenContent.push(operation);\n    screen.innerText = screenContent.join(\"\");\n  }\n};\nexport default Keyboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"NumberButton\");\n$RefreshReg$(_c2, \"Keyboard\");","map":{"version":3,"names":["NumberButton","props","number","click","Keyboard","numbers","i","max","min","push","keyboard","map","value","showNumber","screen","document","getElementById","innerText","screenContent","split","lastIsNumber","isNaN","parseInt","at","length","operation","pop","join"],"sources":["D:/React/my-app/src/components/number-keyboard/number-keyboard.js"],"sourcesContent":["// Single button component\r\nconst NumberButton = (props) => {    \r\n    return (\r\n        <input type=\"button\" className=\"number-button button\" value={props.number} onClick={props.click} />\r\n    );\r\n}\r\n\r\n// All numbers in Keyboard component from min to max\r\nconst Keyboard = (props) => {        \r\n    // Create array of numbers\r\n    let numbers = [];\r\n    for(let i = props.max; i >= props.min; i--) {\r\n        numbers.push(i);\r\n    }\r\n\r\n    // Create button components\r\n    let keyboard = numbers.map(value => {\r\n        return <NumberButton number={value} click={() => showNumber(value)} />\r\n    })\r\n    \r\n    return (   \r\n        <div className=\"keyboard-numbers calculator-section\">\r\n            {keyboard}\r\n        </div>\r\n    );\r\n}\r\n\r\n// Function to replace the number displayed in the screen\r\nconst showNumber = (value) =>{\r\n    let screen = document.getElementById(\"screen\");\r\n    screen.innerText = value;\r\n    let screenContent = screen.innerText.split(\"\");\r\n    // Check if last element is a number (true) or not\r\n    let lastIsNumber = (isNaN(parseInt(screenContent.at(-1)))) ? false : true;\r\n    if (lastIsNumber) { \r\n        if (screenContent.length === 1 && screenContent.at(-1) === \"0\") { // Check that screen has not just a \"0\"\r\n            screen.innerText = 0;\r\n        } else {\r\n            screen.innerText += \" \" + operation;\r\n        }\r\n    } else {\r\n        screenContent.pop();\r\n        screenContent.push(operation);\r\n        screen.innerText = screenContent.join(\"\");\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Keyboard;\r\n\r\n"],"mappings":";;AAAA;AACA,MAAMA,YAAY,GAAIC,KAAK,IAAK;EAC5B,oBACI;IAAO,IAAI,EAAC,QAAQ;IAAC,SAAS,EAAC,sBAAsB;IAAC,KAAK,EAAEA,KAAK,CAACC,MAAO;IAAC,OAAO,EAAED,KAAK,CAACE;EAAM;IAAA;IAAA;IAAA;EAAA,QAAG;AAE3G,CAAC;;AAED;AAAA,KANMH,YAAY;AAOlB,MAAMI,QAAQ,GAAIH,KAAK,IAAK;EACxB;EACA,IAAII,OAAO,GAAG,EAAE;EAChB,KAAI,IAAIC,CAAC,GAAGL,KAAK,CAACM,GAAG,EAAED,CAAC,IAAIL,KAAK,CAACO,GAAG,EAAEF,CAAC,EAAE,EAAE;IACxCD,OAAO,CAACI,IAAI,CAACH,CAAC,CAAC;EACnB;;EAEA;EACA,IAAII,QAAQ,GAAGL,OAAO,CAACM,GAAG,CAACC,KAAK,IAAI;IAChC,oBAAO,QAAC,YAAY;MAAC,MAAM,EAAEA,KAAM;MAAC,KAAK,EAAE,MAAMC,UAAU,CAACD,KAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QAAG;EAC1E,CAAC,CAAC;EAEF,oBACI;IAAK,SAAS,EAAC,qCAAqC;IAAA,UAC/CF;EAAQ;IAAA;IAAA;IAAA;EAAA,QACP;AAEd,CAAC;;AAED;AAAA,MAnBMN,QAAQ;AAoBd,MAAMS,UAAU,GAAID,KAAK,IAAI;EACzB,IAAIE,MAAM,GAAGC,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC;EAC9CF,MAAM,CAACG,SAAS,GAAGL,KAAK;EACxB,IAAIM,aAAa,GAAGJ,MAAM,CAACG,SAAS,CAACE,KAAK,CAAC,EAAE,CAAC;EAC9C;EACA,IAAIC,YAAY,GAAIC,KAAK,CAACC,QAAQ,CAACJ,aAAa,CAACK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAI,KAAK,GAAG,IAAI;EACzE,IAAIH,YAAY,EAAE;IACd,IAAIF,aAAa,CAACM,MAAM,KAAK,CAAC,IAAIN,aAAa,CAACK,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MAAE;MAC9DT,MAAM,CAACG,SAAS,GAAG,CAAC;IACxB,CAAC,MAAM;MACHH,MAAM,CAACG,SAAS,IAAI,GAAG,GAAGQ,SAAS;IACvC;EACJ,CAAC,MAAM;IACHP,aAAa,CAACQ,GAAG,EAAE;IACnBR,aAAa,CAACT,IAAI,CAACgB,SAAS,CAAC;IAC7BX,MAAM,CAACG,SAAS,GAAGC,aAAa,CAACS,IAAI,CAAC,EAAE,CAAC;EAC7C;AACJ,CAAC;AAID,eAAevB,QAAQ;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}