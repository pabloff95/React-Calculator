{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\my-app\\\\src\\\\components\\\\number-keyboard\\\\number-keyboard.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Single button component\nconst NumberButton = props => {\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"button\",\n    className: \"number-button button\",\n    value: props.number,\n    onClick: props.click\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 9\n  }, this);\n};\n\n// All numbers in Keyboard component from min to max\n_c = NumberButton;\nconst Keyboard = props => {\n  // Create array of numbers\n  let numbers = [];\n  for (let i = props.max; i >= props.min; i--) {\n    numbers.push(i);\n  }\n\n  // Create button components\n  let keyboard = numbers.map(value => {\n    return /*#__PURE__*/_jsxDEV(NumberButton, {\n      number: value,\n      click: () => showNumber(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"keyboard-numbers calculator-section\",\n    children: keyboard\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n\n// Function to add numbers to the screen\n_c2 = Keyboard;\nconst showNumber = value => {\n  let screen = document.getElementById(\"screen\");\n  let content = screen.innerText;\n  if (content == \"0\") {\n    screen.innerText = value;\n    console.log(\"c\");\n  } else if (sessionStorage.getItem(\"calculate\")) {\n    screen.innerText = value;\n    sessionStorage.setItem(\"calculate\", false);\n    console.log(\"b\");\n  } else {\n    screen.innerText += value;\n    console.log(\"c\");\n  }\n};\n/*const showNumber = (value) =>{\r\n    let screen = document.getElementById(\"screen\");\r\n    // Check if last element is a number (true) or not\r\n    let lastIsNumber = (isNaN(parseInt(screen.innerText.split(\"\").at(-1)))) ? false : true;\r\n    if (lastIsNumber) { \r\n        screen.innerText = value;\r\n    } else {\r\n        screen.innerText += \" \" + value;\r\n    }\r\n}*/\n\nexport default Keyboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"NumberButton\");\n$RefreshReg$(_c2, \"Keyboard\");","map":{"version":3,"names":["NumberButton","props","number","click","Keyboard","numbers","i","max","min","push","keyboard","map","value","showNumber","screen","document","getElementById","content","innerText","console","log","sessionStorage","getItem","setItem"],"sources":["D:/React/my-app/src/components/number-keyboard/number-keyboard.js"],"sourcesContent":["// Single button component\r\nconst NumberButton = (props) => {    \r\n    return (\r\n        <input type=\"button\" className=\"number-button button\" value={props.number} onClick={props.click} />\r\n    );\r\n}\r\n\r\n// All numbers in Keyboard component from min to max\r\nconst Keyboard = (props) => {        \r\n    // Create array of numbers\r\n    let numbers = [];\r\n    for(let i = props.max; i >= props.min; i--) {\r\n        numbers.push(i);\r\n    }\r\n\r\n    // Create button components\r\n    let keyboard = numbers.map(value => {\r\n        return <NumberButton number={value} click={() => showNumber(value)} />\r\n    })\r\n    \r\n    return (   \r\n        <div className=\"keyboard-numbers calculator-section\">\r\n            {keyboard}\r\n        </div>\r\n    );\r\n}\r\n\r\n// Function to add numbers to the screen\r\nconst showNumber = value =>{\r\n    let screen = document.getElementById(\"screen\");\r\n    let content = screen.innerText;\r\n    if (content == \"0\") { \r\n        screen.innerText = value;\r\n        console.log(\"c\");\r\n    } else if (sessionStorage.getItem(\"calculate\")){\r\n        screen.innerText = value;\r\n        sessionStorage.setItem(\"calculate\", false);    \r\n        console.log(\"b\");\r\n    } else {\r\n        screen.innerText += value;\r\n        console.log(\"c\");\r\n    }\r\n}\r\n/*const showNumber = (value) =>{\r\n    let screen = document.getElementById(\"screen\");\r\n    // Check if last element is a number (true) or not\r\n    let lastIsNumber = (isNaN(parseInt(screen.innerText.split(\"\").at(-1)))) ? false : true;\r\n    if (lastIsNumber) { \r\n        screen.innerText = value;\r\n    } else {\r\n        screen.innerText += \" \" + value;\r\n    }\r\n}*/\r\n\r\n\r\nexport default Keyboard;\r\n\r\n"],"mappings":";;AAAA;AACA,MAAMA,YAAY,GAAIC,KAAK,IAAK;EAC5B,oBACI;IAAO,IAAI,EAAC,QAAQ;IAAC,SAAS,EAAC,sBAAsB;IAAC,KAAK,EAAEA,KAAK,CAACC,MAAO;IAAC,OAAO,EAAED,KAAK,CAACE;EAAM;IAAA;IAAA;IAAA;EAAA,QAAG;AAE3G,CAAC;;AAED;AAAA,KANMH,YAAY;AAOlB,MAAMI,QAAQ,GAAIH,KAAK,IAAK;EACxB;EACA,IAAII,OAAO,GAAG,EAAE;EAChB,KAAI,IAAIC,CAAC,GAAGL,KAAK,CAACM,GAAG,EAAED,CAAC,IAAIL,KAAK,CAACO,GAAG,EAAEF,CAAC,EAAE,EAAE;IACxCD,OAAO,CAACI,IAAI,CAACH,CAAC,CAAC;EACnB;;EAEA;EACA,IAAII,QAAQ,GAAGL,OAAO,CAACM,GAAG,CAACC,KAAK,IAAI;IAChC,oBAAO,QAAC,YAAY;MAAC,MAAM,EAAEA,KAAM;MAAC,KAAK,EAAE,MAAMC,UAAU,CAACD,KAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QAAG;EAC1E,CAAC,CAAC;EAEF,oBACI;IAAK,SAAS,EAAC,qCAAqC;IAAA,UAC/CF;EAAQ;IAAA;IAAA;IAAA;EAAA,QACP;AAEd,CAAC;;AAED;AAAA,MAnBMN,QAAQ;AAoBd,MAAMS,UAAU,GAAGD,KAAK,IAAG;EACvB,IAAIE,MAAM,GAAGC,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC;EAC9C,IAAIC,OAAO,GAAGH,MAAM,CAACI,SAAS;EAC9B,IAAID,OAAO,IAAI,GAAG,EAAE;IAChBH,MAAM,CAACI,SAAS,GAAGN,KAAK;IACxBO,OAAO,CAACC,GAAG,CAAC,GAAG,CAAC;EACpB,CAAC,MAAM,IAAIC,cAAc,CAACC,OAAO,CAAC,WAAW,CAAC,EAAC;IAC3CR,MAAM,CAACI,SAAS,GAAGN,KAAK;IACxBS,cAAc,CAACE,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC;IAC1CJ,OAAO,CAACC,GAAG,CAAC,GAAG,CAAC;EACpB,CAAC,MAAM;IACHN,MAAM,CAACI,SAAS,IAAIN,KAAK;IACzBO,OAAO,CAACC,GAAG,CAAC,GAAG,CAAC;EACpB;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,eAAehB,QAAQ;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}