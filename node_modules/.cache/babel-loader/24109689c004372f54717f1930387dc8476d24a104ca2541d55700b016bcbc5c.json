{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\my-app\\\\src\\\\components\\\\operation-buttons\\\\side-menu.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Normal button component\nconst Button = props => {\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"button\",\n    className: \"operation-button button\",\n    value: props.text,\n    onClick: props.click\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 9\n  }, this);\n};\n\n// Side menu receiving string of operations to perform (+ , - , x, ...)\n_c = Button;\nconst SideMenu = props => {\n  let operations = props.operations.split(',');\n  let buttons = operations.map(operation => {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      text: operation,\n      click: () => addOperation(operation)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"side-menu calculator-section\",\n    children: buttons\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n};\n\n// Function to add the operation simbol to the screen\n_c2 = SideMenu;\nconst addOperation = operation => {\n  let screen = document.getElementById(\"screen\");\n  // Check if operation = C ==> Delete screen and set 0. Leave function\n  if (operation === \"C\") {\n    screen.innerText = \"0\";\n    return;\n  }\n  if (operation === \"=\") {\n    screen.innerText = getResult();\n    return;\n  }\n  let screenContent = screen.innerText.split(\"\");\n  // Check if last element is a number (true) or not\n  let lastIsNumber = isNaN(parseInt(screenContent.at(-1))) ? false : true;\n  if (lastIsNumber) {\n    if (screenContent.length === 1 && screenContent.at(-1) === \"0\") {\n      // Check that screen has not just a \"0\"\n      screen.innerText = 0;\n    } else {\n      screen.innerText += \" \" + operation;\n    }\n  } else {\n    screenContent.pop();\n    screenContent.push(operation);\n    screen.innerText = screenContent.join(\"\");\n  }\n};\nconst getResult = () => {\n  let screenContent = document.getElementById(\"screen\").innerText.split(\"\");\n  screenContent = screenContent.map(value => {\n    if (value === \"x\") return \"*\";\n    if (value !== \" \") return value;\n  });\n  let sum = parseInt(screenContent.shift());\n  while (screenContent) for (let i = 0; i < screenContent.length; i++) {\n    if (isNaN(parseInt(screenContent[i]))) {\n      if (screenContent[i] === \"+\") {\n        sum += screenContent[i + 1];\n        i++;\n      }\n    }\n  }\n\n  /*screenContent = screenContent.map(value => {\r\n      if (isNaN(parseInt(value))) {\r\n        }\r\n  });*/\n\n  return sum;\n};\nexport default SideMenu;\nvar _c, _c2;\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"SideMenu\");","map":{"version":3,"names":["Button","props","text","click","SideMenu","operations","split","buttons","map","operation","addOperation","screen","document","getElementById","innerText","getResult","screenContent","lastIsNumber","isNaN","parseInt","at","length","pop","push","join","value","sum","shift","i"],"sources":["D:/React/my-app/src/components/operation-buttons/side-menu.js"],"sourcesContent":["// Normal button component\r\nconst Button = (props) => {\r\n    return (\r\n        <input type=\"button\" className=\"operation-button button\" value={props.text} onClick={props.click} />\r\n    )\r\n}\r\n\r\n// Side menu receiving string of operations to perform (+ , - , x, ...)\r\nconst SideMenu = (props) => {   \r\n    let operations = props.operations.split(',');\r\n    let buttons = operations.map(operation => {\r\n        return <Button text={operation} click={() => addOperation(operation)} />;\r\n    });\r\n\r\n    return (\r\n        <div className=\"side-menu calculator-section\">\r\n            {buttons}\r\n        </div>\r\n    );\r\n}\r\n\r\n// Function to add the operation simbol to the screen\r\nconst addOperation = (operation) => {\r\n    let screen = document.getElementById(\"screen\");\r\n    // Check if operation = C ==> Delete screen and set 0. Leave function\r\n    if (operation === \"C\") { \r\n        screen.innerText = \"0\";\r\n        return;\r\n    }\r\n    if (operation === \"=\"){\r\n        screen.innerText = getResult();\r\n        return;\r\n    }\r\n    let screenContent = screen.innerText.split(\"\");\r\n    // Check if last element is a number (true) or not\r\n    let lastIsNumber = (isNaN(parseInt(screenContent.at(-1)))) ? false : true;\r\n    if (lastIsNumber) { \r\n        if (screenContent.length === 1 && screenContent.at(-1) === \"0\") { // Check that screen has not just a \"0\"\r\n            screen.innerText = 0;\r\n        } else {\r\n            screen.innerText += \" \" + operation;\r\n        }\r\n    } else {\r\n        screenContent.pop();\r\n        screenContent.push(operation);\r\n        screen.innerText = screenContent.join(\"\");\r\n    }\r\n}\r\n\r\nconst getResult = () => {\r\n    let screenContent = document.getElementById(\"screen\").innerText.split(\"\");\r\n    screenContent = screenContent.map(value => {\r\n        if (value === \"x\") return \"*\";\r\n        if (value !== \" \") return value;        \r\n    })\r\n    let sum = parseInt(screenContent.shift());\r\n\r\n    while (screenContent)\r\n\r\n    for (let i = 0; i < screenContent.length; i++) {\r\n        if (isNaN(parseInt(screenContent[i]))) {\r\n            if (screenContent[i] === \"+\") {\r\n                sum += screenContent[i+1]\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /*screenContent = screenContent.map(value => {\r\n        if (isNaN(parseInt(value))) {\r\n\r\n        }\r\n    });*/\r\n\r\n    return sum;\r\n}\r\n\r\nexport default SideMenu;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}