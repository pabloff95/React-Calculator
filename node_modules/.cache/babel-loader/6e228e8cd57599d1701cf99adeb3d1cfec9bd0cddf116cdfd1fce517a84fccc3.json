{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\my-app\\\\src\\\\components\\\\operation-buttons\\\\side-menu.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Normal button component\nconst Button = props => {\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"button\",\n    className: \"operation-button button\",\n    value: props.text,\n    onClick: props.click\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 9\n  }, this);\n};\n\n// Side menu receiving string of operations to perform (+ , - , x, ...)\n_c = Button;\nconst SideMenu = props => {\n  let operations = props.operations.split(',');\n  let buttons = operations.map(operation => {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      text: operation,\n      click: () => {\n        addOperation(operation);\n        updateOperationsHistoric(operation);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"side-menu calculator-section\",\n    children: buttons\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n};\n\n// Function to add the operation simbol to the screen\n_c2 = SideMenu;\nconst addOperation = operation => {\n  let screen = document.getElementById(\"screen\");\n  // Check if operation = C ==> Delete screen and set 0\n  if (operation === \"C\") {\n    screen.innerText = \"0\";\n    sessionStorage.removeItem(\"calculate\");\n    sessionStorage.removeItem(\"operation\");\n    sessionStorage.removeItem(\"firstValue\");\n\n    // Check if operation = \"=\" ==> Calculate result\n  } else if (operation === \"=\") {\n    let total = calculate(); // Get value of operation\n    screen.innerText = total;\n    sessionStorage.setItem(\"operation\", \"finished\");\n\n    // Check if operation = \"=\" ==> Delete 1 number from screen\n  } else if (operation === \"DEL\") {\n    let valueAfterDelete = screen.innerText.substring(0, screen.innerText.length - 1);\n    screen.innerText = valueAfterDelete.length > 0 ? valueAfterDelete : \"0\";\n\n    // Prepare operation --> update session storage and update screen\n  } else {\n    sessionStorage.setItem(\"calculate\", \"yes\");\n    sessionStorage.setItem(\"operation\", operation);\n    sessionStorage.setItem(\"firstValue\", screen.innerText);\n    let total = calculate(); // Get value of operation\n    if (total !== \"\") screen.innerText = total;\n  }\n};\n\n// Calculate operation that is being typed by the user\nconst calculate = () => {\n  // Get full operation (-> last child text)\n  let fullOperation = document.getElementById(\"historic-container\").innerText.split(\"\\n\").at(-1).split(\" \");\n  // Perform operation\n  let innerOperation;\n  let total = fullOperation.reduce((total, value) => {\n    value = value[0] === \"(\" ? value.substring(1, value.indexOf(\")\")) : value; // Remove parentheses from negative numbers\n    if (isNaN(value)) {\n      innerOperation = value;\n      return total;\n    } else {\n      if (innerOperation === \"+\") return parseFloat(total) + parseFloat(value);\n      if (innerOperation === \"-\") return parseFloat(total) - parseFloat(value);\n      if (innerOperation === \"x\") return parseFloat(total) * parseFloat(value);\n      if (innerOperation === \"/\") return parseFloat(total) / parseFloat(value);\n      return total;\n    }\n  });\n  return total;\n};\n\n// Function to update the historic\nconst updateOperationsHistoric = operation => {\n  let historic = document.getElementById(\"historic-container\");\n  historic.innerText += \" \" + operation;\n  // If calculate (=) -> show result + introduce new line\n  if (operation === \"=\") historic.innerText += \" \" + document.getElementById(\"screen\").innerText + \"\\n\";\n  // If delete (c) -> clean historic\n  if (operation === \"C\") historic.innerText = \"\";\n  // If calculating with previous result\n  if (historic.hasChildNodes() && historic.lastChild.data !== undefined && historic.lastChild.data[0] === \" \") {\n    historic.lastChild.data = document.getElementById(\"screen\").innerText + \" \" + operation + \" \";\n  }\n};\nexport default SideMenu;\nvar _c, _c2;\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"SideMenu\");","map":{"version":3,"names":["Button","props","text","click","SideMenu","operations","split","buttons","map","operation","addOperation","updateOperationsHistoric","screen","document","getElementById","innerText","sessionStorage","removeItem","total","calculate","setItem","valueAfterDelete","substring","length","fullOperation","at","innerOperation","reduce","value","indexOf","isNaN","parseFloat","historic","hasChildNodes","lastChild","data","undefined"],"sources":["D:/React/my-app/src/components/operation-buttons/side-menu.js"],"sourcesContent":["// Normal button component\r\nconst Button = (props) => {\r\n    return (\r\n        <input type=\"button\" className=\"operation-button button\" value={props.text} onClick={props.click} />\r\n    )\r\n}\r\n\r\n// Side menu receiving string of operations to perform (+ , - , x, ...)\r\nconst SideMenu = (props) => {   \r\n    let operations = props.operations.split(',');\r\n    let buttons = operations.map(operation => {\r\n        return <Button text={operation} click={() => {\r\n            addOperation(operation);            \r\n            updateOperationsHistoric(operation);\r\n        }} />;\r\n    });\r\n\r\n    return (\r\n        <div className=\"side-menu calculator-section\">\r\n            {buttons}\r\n        </div>\r\n    );\r\n}\r\n\r\n// Function to add the operation simbol to the screen\r\nconst addOperation = operation => {\r\n    let screen = document.getElementById(\"screen\");\r\n    // Check if operation = C ==> Delete screen and set 0\r\n    if (operation === \"C\") { \r\n        screen.innerText = \"0\";\r\n        sessionStorage.removeItem(\"calculate\");\r\n        sessionStorage.removeItem(\"operation\");\r\n        sessionStorage.removeItem(\"firstValue\");\r\n    \r\n    // Check if operation = \"=\" ==> Calculate result\r\n    } else if (operation === \"=\") {\r\n        let total = calculate(); // Get value of operation\r\n        screen.innerText = total;\r\n        sessionStorage.setItem(\"operation\", \"finished\");\r\n    \r\n    // Check if operation = \"=\" ==> Delete 1 number from screen\r\n    } else if (operation === \"DEL\") {\r\n        let valueAfterDelete = screen.innerText.substring(0, screen.innerText.length -1);\r\n        screen.innerText = (valueAfterDelete.length>0)? valueAfterDelete: \"0\";\r\n\r\n    // Prepare operation --> update session storage and update screen\r\n    } else {\r\n        sessionStorage.setItem(\"calculate\", \"yes\");    \r\n        sessionStorage.setItem(\"operation\", operation);    \r\n        sessionStorage.setItem(\"firstValue\", screen.innerText);\r\n        let total = calculate(); // Get value of operation\r\n        if(total !== \"\") screen.innerText = total;\r\n    }    \r\n}\r\n\r\n// Calculate operation that is being typed by the user\r\nconst calculate = () => {\r\n    // Get full operation (-> last child text)\r\n    let fullOperation = document.getElementById(\"historic-container\").innerText.split(\"\\n\").at(-1).split(\" \");\r\n    // Perform operation\r\n    let innerOperation;\r\n    let total = fullOperation.reduce((total, value) => {\r\n        value = (value[0] === \"(\")? value.substring(1, value.indexOf(\")\")) : value; // Remove parentheses from negative numbers\r\n        if (isNaN(value)) {\r\n            innerOperation = value;\r\n            return total;\r\n        } else {\r\n            if (innerOperation === \"+\") return (parseFloat(total) + parseFloat(value));\r\n            if (innerOperation === \"-\") return (parseFloat(total) - parseFloat(value));\r\n            if (innerOperation === \"x\") return (parseFloat(total) * parseFloat(value));\r\n            if (innerOperation === \"/\") return (parseFloat(total) / parseFloat(value));\r\n            return total;\r\n        }\r\n    });\r\n\r\n    return total;\r\n}\r\n\r\n// Function to update the historic\r\nconst updateOperationsHistoric = operation => {\r\n    let historic = document.getElementById(\"historic-container\");\r\n    historic.innerText +=  \" \" + operation;\r\n    // If calculate (=) -> show result + introduce new line\r\n    if (operation === \"=\") historic.innerText += \" \" + document.getElementById(\"screen\").innerText + \"\\n\";\r\n    // If delete (c) -> clean historic\r\n    if (operation === \"C\") historic.innerText = \"\";\r\n    // If calculating with previous result\r\n    if (historic.hasChildNodes() && historic.lastChild.data !== undefined && historic.lastChild.data[0] === \" \") {\r\n        historic.lastChild.data = document.getElementById(\"screen\").innerText + \" \" + operation + \" \";\r\n    }\r\n}\r\n\r\nexport default SideMenu;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}