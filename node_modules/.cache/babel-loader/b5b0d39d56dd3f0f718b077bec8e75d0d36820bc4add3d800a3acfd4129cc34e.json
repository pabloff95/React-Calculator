{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\my-app\\\\src\\\\components\\\\screen\\\\screen.js\";\nimport { calculate, deleteHistoric } from '../operation-buttons/side-menu';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Screen = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"screen\",\n    children: props.initial\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 9\n  }, this);\n};\n\n// Add event to write in screen when pressing keyboard key\n_c = Screen;\nwindow.addEventListener(\"keydown\", event => {\n  keyboardWrite(event.key);\n});\nconst keyboardWrite = key => {\n  let screen = document.querySelector(\"#screen\");\n  let screenContent = screen.innerText;\n  let historic = document.querySelector(\"#historic-container\");\n  let historicContent = historic.innerText;\n  let operations = [\"+\", \"x\", \"X\", \"-\", \"/\"];\n\n  // Write numbers\n  if (!isNaN(parseInt(key))) {\n    // Numbers and screen is different to \"0\"\n    if (screenContent !== \"0\") {\n      // Last element pressed was an operation (--> add space before number)\n      if (operations.includes(historicContent.at(-1))) {\n        historic.innerText += \" \" + key;\n        screen.innerText = key;\n\n        // Last element pressed was a number\n      } else {\n        screen.innerText += key;\n        historic.innerText += key;\n      }\n\n      // Numbers, but in screen there is only a \"0\"       \n    } else {\n      screen.innerText = key;\n      historic.innerText = key;\n    }\n  }\n\n  // Write operations (+, -, x, /)\n  else if (operations.includes(key)) {\n    // Update historic      \n    historic.innerText += \" \" + key;\n    // Update session storage to \n    sessionStorage.setItem(\"calculate\", \"yes\");\n    sessionStorage.setItem(\"operation\", key);\n    sessionStorage.setItem(\"firstValue\", screen.innerText);\n    let total = calculate(); // Get value of operation\n    if (total !== \"\") screen.innerText = total;\n  }\n\n  // Decimals\n  else if (key === \".\") {\n    screen.innerText += \".\";\n  }\n\n  // Delete\n  else if (key === \"Backspace\") {\n    // Update screen\n    let newScreenContent = screenContent.substring(0, screenContent.length - 1);\n    screen.innerText = newScreenContent === \"\" ? \"0\" : newScreenContent;\n    // Update historic\n    deleteHistoric();\n  }\n\n  // Calculate operation\n  else if (key === \"=\" || key === \"Enter\") {\n    screen.innerText = calculate();\n    historic.innerText += \" = \" + calculate() + \"\\n\";\n  }\n};\nexport default Screen;\nvar _c;\n$RefreshReg$(_c, \"Screen\");","map":{"version":3,"names":["calculate","deleteHistoric","Screen","props","initial","window","addEventListener","event","keyboardWrite","key","screen","document","querySelector","screenContent","innerText","historic","historicContent","operations","isNaN","parseInt","includes","at","sessionStorage","setItem","total","newScreenContent","substring","length"],"sources":["D:/React/my-app/src/components/screen/screen.js"],"sourcesContent":["import {calculate, deleteHistoric} from '../operation-buttons/side-menu';\r\n\r\nconst Screen = (props) => {\r\n    return (\r\n        <div id=\"screen\">{props.initial}</div>\r\n    );\r\n}\r\n\r\n// Add event to write in screen when pressing keyboard key\r\nwindow.addEventListener(\"keydown\", (event) => {\r\n    keyboardWrite(event.key);\r\n});\r\n\r\nconst keyboardWrite = (key) => {        \r\n    let screen = document.querySelector(\"#screen\");\r\n    let screenContent = screen.innerText;\r\n    let historic = document.querySelector(\"#historic-container\");\r\n    let historicContent = historic.innerText;\r\n    let operations = [\"+\", \"x\", \"X\", \"-\", \"/\"];\r\n    \r\n    // Write numbers\r\n    if (!isNaN(parseInt(key))) {\r\n        // Numbers and screen is different to \"0\"\r\n        if (screenContent !== \"0\") {\r\n            // Last element pressed was an operation (--> add space before number)\r\n            if (operations.includes(historicContent.at(-1))) {                \r\n                historic.innerText += \" \" + key;\r\n                screen.innerText = key;\r\n\r\n            // Last element pressed was a number\r\n            } else {\r\n                screen.innerText += key;\r\n                historic.innerText += key;\r\n            }    \r\n\r\n        // Numbers, but in screen there is only a \"0\"       \r\n        } else { \r\n            screen.innerText = key;\r\n            historic.innerText = key;\r\n        }\r\n    }\r\n\r\n    // Write operations (+, -, x, /)\r\n    else if (operations.includes(key)) {\r\n        // Update historic      \r\n        historic.innerText += \" \" + key;\r\n        // Update session storage to \r\n        sessionStorage.setItem(\"calculate\", \"yes\");    \r\n        sessionStorage.setItem(\"operation\", key);    \r\n        sessionStorage.setItem(\"firstValue\", screen.innerText);\r\n        let total = calculate(); // Get value of operation\r\n        if(total !== \"\") screen.innerText = total;\r\n    }\r\n\r\n    // Decimals\r\n    else if (key === \".\"){\r\n        screen.innerText += \".\";\r\n    }\r\n\r\n    // Delete\r\n    else if (key === \"Backspace\") {        \r\n        // Update screen\r\n        let newScreenContent = screenContent.substring(0, screenContent.length -1);\r\n        screen.innerText = (newScreenContent === \"\")? \"0\": newScreenContent;\r\n        // Update historic\r\n        deleteHistoric(); \r\n    }\r\n    \r\n    // Calculate operation\r\n    else if (key === \"=\" || key === \"Enter\") {\r\n        screen.innerText = calculate();\r\n        historic.innerText += \" = \" + calculate() + \"\\n\";\r\n    }\r\n\r\n}\r\n\r\nexport default Screen;"],"mappings":";AAAA,SAAQA,SAAS,EAAEC,cAAc,QAAO,gCAAgC;AAAC;AAEzE,MAAMC,MAAM,GAAIC,KAAK,IAAK;EACtB,oBACI;IAAK,EAAE,EAAC,QAAQ;IAAA,UAAEA,KAAK,CAACC;EAAO;IAAA;IAAA;IAAA;EAAA,QAAO;AAE9C,CAAC;;AAED;AAAA,KANMF,MAAM;AAOZG,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAGC,KAAK,IAAK;EAC1CC,aAAa,CAACD,KAAK,CAACE,GAAG,CAAC;AAC5B,CAAC,CAAC;AAEF,MAAMD,aAAa,GAAIC,GAAG,IAAK;EAC3B,IAAIC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,SAAS,CAAC;EAC9C,IAAIC,aAAa,GAAGH,MAAM,CAACI,SAAS;EACpC,IAAIC,QAAQ,GAAGJ,QAAQ,CAACC,aAAa,CAAC,qBAAqB,CAAC;EAC5D,IAAII,eAAe,GAAGD,QAAQ,CAACD,SAAS;EACxC,IAAIG,UAAU,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;;EAE1C;EACA,IAAI,CAACC,KAAK,CAACC,QAAQ,CAACV,GAAG,CAAC,CAAC,EAAE;IACvB;IACA,IAAII,aAAa,KAAK,GAAG,EAAE;MACvB;MACA,IAAII,UAAU,CAACG,QAAQ,CAACJ,eAAe,CAACK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QAC7CN,QAAQ,CAACD,SAAS,IAAI,GAAG,GAAGL,GAAG;QAC/BC,MAAM,CAACI,SAAS,GAAGL,GAAG;;QAE1B;MACA,CAAC,MAAM;QACHC,MAAM,CAACI,SAAS,IAAIL,GAAG;QACvBM,QAAQ,CAACD,SAAS,IAAIL,GAAG;MAC7B;;MAEJ;IACA,CAAC,MAAM;MACHC,MAAM,CAACI,SAAS,GAAGL,GAAG;MACtBM,QAAQ,CAACD,SAAS,GAAGL,GAAG;IAC5B;EACJ;;EAEA;EAAA,KACK,IAAIQ,UAAU,CAACG,QAAQ,CAACX,GAAG,CAAC,EAAE;IAC/B;IACAM,QAAQ,CAACD,SAAS,IAAI,GAAG,GAAGL,GAAG;IAC/B;IACAa,cAAc,CAACC,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC;IAC1CD,cAAc,CAACC,OAAO,CAAC,WAAW,EAAEd,GAAG,CAAC;IACxCa,cAAc,CAACC,OAAO,CAAC,YAAY,EAAEb,MAAM,CAACI,SAAS,CAAC;IACtD,IAAIU,KAAK,GAAGxB,SAAS,EAAE,CAAC,CAAC;IACzB,IAAGwB,KAAK,KAAK,EAAE,EAAEd,MAAM,CAACI,SAAS,GAAGU,KAAK;EAC7C;;EAEA;EAAA,KACK,IAAIf,GAAG,KAAK,GAAG,EAAC;IACjBC,MAAM,CAACI,SAAS,IAAI,GAAG;EAC3B;;EAEA;EAAA,KACK,IAAIL,GAAG,KAAK,WAAW,EAAE;IAC1B;IACA,IAAIgB,gBAAgB,GAAGZ,aAAa,CAACa,SAAS,CAAC,CAAC,EAAEb,aAAa,CAACc,MAAM,GAAE,CAAC,CAAC;IAC1EjB,MAAM,CAACI,SAAS,GAAIW,gBAAgB,KAAK,EAAE,GAAG,GAAG,GAAEA,gBAAgB;IACnE;IACAxB,cAAc,EAAE;EACpB;;EAEA;EAAA,KACK,IAAIQ,GAAG,KAAK,GAAG,IAAIA,GAAG,KAAK,OAAO,EAAE;IACrCC,MAAM,CAACI,SAAS,GAAGd,SAAS,EAAE;IAC9Be,QAAQ,CAACD,SAAS,IAAI,KAAK,GAAGd,SAAS,EAAE,GAAG,IAAI;EACpD;AAEJ,CAAC;AAED,eAAeE,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}