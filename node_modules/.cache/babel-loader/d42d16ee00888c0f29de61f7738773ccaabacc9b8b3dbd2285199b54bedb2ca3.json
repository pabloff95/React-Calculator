{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\my-app\\\\src\\\\components\\\\operation-buttons\\\\side-menu.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Normal button component\nconst Button = props => {\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"button\",\n    className: \"operation-button button\",\n    value: props.text,\n    onClick: props.click\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 9\n  }, this);\n};\n\n// Side menu receiving string of operations to perform (+ , - , x, ...)\n_c = Button;\nconst SideMenu = props => {\n  let operations = props.operations.split(',');\n  let buttons = operations.map(operation => {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      text: operation,\n      click: () => addOperation(operation)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"side-menu calculator-section\",\n    children: buttons\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n};\n\n// Function to add the operation simbol to the screen\n_c2 = SideMenu;\nconst addOperation = operation => {\n  let screen = document.getElementById(\"screen\");\n  let screenContent = screen.innerText.split(\"\");\n  // Check if last element is a number (true) or not\n  let lastNumber = isNaN(parseInt(screenContent.at(-1))) ? false : true;\n  if (lastNumber) {\n    screen.innerText += \" \" + operation;\n  }\n};\nexport default SideMenu;\nvar _c, _c2;\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"SideMenu\");","map":{"version":3,"names":["Button","props","text","click","SideMenu","operations","split","buttons","map","operation","addOperation","screen","document","getElementById","screenContent","innerText","lastNumber","isNaN","parseInt","at"],"sources":["D:/React/my-app/src/components/operation-buttons/side-menu.js"],"sourcesContent":["// Normal button component\r\nconst Button = (props) => {\r\n    return (\r\n        <input type=\"button\" className=\"operation-button button\" value={props.text} onClick={props.click} />\r\n    )\r\n}\r\n\r\n// Side menu receiving string of operations to perform (+ , - , x, ...)\r\nconst SideMenu = (props) => {   \r\n    let operations = props.operations.split(',');\r\n    let buttons = operations.map(operation => {\r\n        return <Button text={operation} click={() => addOperation(operation)} />;\r\n    });\r\n\r\n    return (\r\n        <div className=\"side-menu calculator-section\">\r\n            {buttons}\r\n        </div>\r\n    );\r\n}\r\n\r\n// Function to add the operation simbol to the screen\r\nconst addOperation = (operation) => {\r\n    let screen = document.getElementById(\"screen\");\r\n    let screenContent = screen.innerText.split(\"\");    \r\n    // Check if last element is a number (true) or not\r\n    let lastNumber = (isNaN(parseInt(screenContent.at(-1)))) ? false : true;\r\n    if (lastNumber) {\r\n        screen.innerText += \" \" + operation;\r\n    }\r\n    \r\n    \r\n}\r\n\r\nexport default SideMenu;"],"mappings":";;AAAA;AACA,MAAMA,MAAM,GAAIC,KAAK,IAAK;EACtB,oBACI;IAAO,IAAI,EAAC,QAAQ;IAAC,SAAS,EAAC,yBAAyB;IAAC,KAAK,EAAEA,KAAK,CAACC,IAAK;IAAC,OAAO,EAAED,KAAK,CAACE;EAAM;IAAA;IAAA;IAAA;EAAA,QAAG;AAE5G,CAAC;;AAED;AAAA,KANMH,MAAM;AAOZ,MAAMI,QAAQ,GAAIH,KAAK,IAAK;EACxB,IAAII,UAAU,GAAGJ,KAAK,CAACI,UAAU,CAACC,KAAK,CAAC,GAAG,CAAC;EAC5C,IAAIC,OAAO,GAAGF,UAAU,CAACG,GAAG,CAACC,SAAS,IAAI;IACtC,oBAAO,QAAC,MAAM;MAAC,IAAI,EAAEA,SAAU;MAAC,KAAK,EAAE,MAAMC,YAAY,CAACD,SAAS;IAAE;MAAA;MAAA;MAAA;IAAA,QAAG;EAC5E,CAAC,CAAC;EAEF,oBACI;IAAK,SAAS,EAAC,8BAA8B;IAAA,UACxCF;EAAO;IAAA;IAAA;IAAA;EAAA,QACN;AAEd,CAAC;;AAED;AAAA,MAbMH,QAAQ;AAcd,MAAMM,YAAY,GAAID,SAAS,IAAK;EAChC,IAAIE,MAAM,GAAGC,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC;EAC9C,IAAIC,aAAa,GAAGH,MAAM,CAACI,SAAS,CAACT,KAAK,CAAC,EAAE,CAAC;EAC9C;EACA,IAAIU,UAAU,GAAIC,KAAK,CAACC,QAAQ,CAACJ,aAAa,CAACK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAI,KAAK,GAAG,IAAI;EACvE,IAAIH,UAAU,EAAE;IACZL,MAAM,CAACI,SAAS,IAAI,GAAG,GAAGN,SAAS;EACvC;AAGJ,CAAC;AAED,eAAeL,QAAQ;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}